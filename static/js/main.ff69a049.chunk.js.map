{"version":3,"sources":["PrisonersProblem/Node/Node.jsx","utils/utils.js","PrisonersProblem/PrisonersProblem.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","index","value","nodeStyle","cycleNum","backgroundColor","cycleColor","id","className","style","getGrid","NUM_NODES","values","i","push","lst","length","i2","Math","floor","random","temp","randomizeArray","map","visited","cycles","grid","count","randomColor","toString","first","currIndex","cycle","pop","putCycles","list","elementsPerSubArray","k","matrix","listToMatrix","sqrt","initialState","showColors","reducer","state","action","type","PrisonersProblem","useState","setGrid","setCycles","useReducer","dispatch","useEffect","getInitialGrid","console","log","toggleOpacity","dim","document","getElementById","opacity","Object","entries","key","color","width","height","outline","display","onClick","row","rowIdx","node","nodeIdx","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ff69a049.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default function Node({ index, value, cycleNum, cycleColor }) {\r\n    const nodeStyle = {\r\n        backgroundColor: \"#\" + cycleColor,\r\n    }\r\n    return (\r\n        <div \r\n            id={`node-${index}`} \r\n            className=\"node\"\r\n            style={nodeStyle}>\r\n            {index}:{value}\r\n        </div>\r\n    )\r\n}\r\n","function randomizeArray(lst) {\r\n    for (var i = lst.length - 1; i > 0; i--) {\r\n        var i2 = Math.floor(Math.random() * (i + 1));\r\n        var temp = lst[i];\r\n        lst[i] = lst[i2];\r\n        lst[i2] = temp;\r\n    }\r\n}\r\n\r\nfunction listToMatrix(list, elementsPerSubArray) {\r\n    var matrix = [], i, k;\r\n\r\n    for (i = 0, k = -1; i < list.length; i++) {\r\n        if (i % elementsPerSubArray === 0) {\r\n            k++;\r\n            matrix[k] = [];\r\n        }\r\n\r\n        matrix[k].push(list[i]);\r\n    }\r\n\r\n    return matrix;\r\n}\r\n\r\nfunction putCycles(grid, NUM_NODES){\r\n    const cycles = {};\r\n    var count = 1;\r\n    for(let i = 0;i < NUM_NODES;i++){\r\n        const {index, visited } = grid[i]\r\n        if(!visited){\r\n            var randomColor = Math.floor(Math.random()*16777215).toString(16);\r\n            const first = index;\r\n            var currIndex = index;\r\n            const cycle = [];\r\n            cycle.push(currIndex);\r\n            grid[currIndex-1].cycleNum = count;\r\n            grid[currIndex-1].cycleColor = randomColor;\r\n            do {\r\n                grid[currIndex-1].visited = true;\r\n                currIndex = grid[currIndex-1].value;\r\n                cycle.push(currIndex);\r\n                grid[currIndex-1].cycleNum = count;\r\n                grid[currIndex-1].cycleColor = randomColor;\r\n            } while(first !== currIndex);\r\n            cycle.pop(); // removes last index due to repeating it\r\n            cycles[randomColor] = cycle;\r\n            count++;\r\n        }\r\n    }\r\n    return cycles;\r\n}\r\n\r\nexport function getGrid(NUM_NODES){\r\n    const values = [];\r\n    for (let i = 1; i <= NUM_NODES; i++) {\r\n        values.push(i);\r\n    }\r\n    randomizeArray(values);\r\n    const lst = values.map(\r\n        (value, index) => { \r\n            return {\r\n                index:index+1, \r\n                value,\r\n                visited: false,\r\n                cycleNum: 0,\r\n                cycleColor: \"\"\r\n            }\r\n        }\r\n    );\r\n    \r\n    const cycles = putCycles(lst, NUM_NODES);\r\n    const grid = listToMatrix(lst, Math.sqrt(NUM_NODES));\r\n\r\n    return { grid, cycles }\r\n}","import React, { useState, useEffect, useReducer } from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport { getGrid } from '../utils/utils';\r\n\r\nimport './PrisonersProblem.css';\r\n\r\nconst NUM_NODES = 100;\r\nconst initialState = { showColors: true };\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'on':\r\n            return { showColors: true };\r\n        case 'off':\r\n            return { showColors: false };\r\n        default:\r\n            return { showColors: false };\r\n    }\r\n}\r\n\r\nexport default function PrisonersProblem() {\r\n    const [grid, setGrid] = useState([]);\r\n    const [cycles, setCycles] = useState([])\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    useEffect(() => {\r\n        const { grid, cycles } = getInitialGrid();\r\n        setGrid(grid);\r\n        setCycles(cycles);\r\n        console.log(cycles);\r\n    }, []);\r\n\r\n    const toggleOpacity = (cycle, dim) => {\r\n        if(dim){\r\n            for(let index of cycle ) document.getElementById(`node-${index}`).style.opacity = 0.3;\r\n        }\r\n        else {\r\n            for(let index of cycle ) document.getElementById(`node-${index}`).style.opacity = 1;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <> \r\n            <div>\r\n                {Object.entries(cycles).map(([key, value]) =>\r\n                <div style={{color:\"#\"+key}}>\r\n                    <div style={{width: \"10px\", height: \"10px\",outline: \"1px solid black\", backgroundColor: \"#\"+key, display: \"inline-block\"}}></div>\r\n                    {key} : {value.length}\r\n                    <button onClick={() => toggleOpacity(value, true)}>Off</button>\r\n                    <button onClick={() => toggleOpacity(value, false)}>On</button>\r\n                </div>\r\n                )}\r\n            </div>\r\n            <button onClick={() => dispatch({type: 'off'})}>Off</button>\r\n            <button onClick={() => dispatch({type: 'on'})}>On</button>\r\n            <div className=\"grid\">\r\n                {grid.map((row, rowIdx) => {\r\n                    return (\r\n                        <div key={rowIdx}>\r\n                            {row.map((node, nodeIdx) => {\r\n                                const {index, value, cycleNum, cycleColor} = node;\r\n                                \r\n                                return (\r\n                                    <Node\r\n                                        key={nodeIdx}\r\n                                        index={index}\r\n                                        value={value}\r\n                                        cycleNum={cycleNum}\r\n                                        cycleColor={state.showColors ? cycleColor : 'ffffff'}></Node>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n    const { grid, cycles } = getGrid(NUM_NODES);\r\n    return { grid, cycles };\r\n};","import React from 'react';\nimport './App.css';\nimport PrisonersProblem from './PrisonersProblem/PrisonersProblem';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PrisonersProblem></PrisonersProblem>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}